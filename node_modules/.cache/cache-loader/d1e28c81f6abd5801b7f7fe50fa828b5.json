{"remainingRequest":"/Users/akin/smallbizweek/node_modules/babel-loader/lib/index.js!/Users/akin/smallbizweek/node_modules/vue-loader/lib/selector.js?type=script&index=0!/Users/akin/smallbizweek/src/components/GoogleMap.vue","dependencies":[{"path":"/Users/akin/smallbizweek/src/components/GoogleMap.vue","mtime":1524936714806},{"path":"/Users/akin/smallbizweek/package.json","mtime":1524923600490},{"path":"/Users/akin/smallbizweek/node_modules/cache-loader/dist/cjs.js","mtime":1524883008152},{"path":"/Users/akin/smallbizweek/node_modules/babel-loader/lib/index.js","mtime":1519636541000},{"path":"/Users/akin/smallbizweek/node_modules/vue-loader/lib/selector.js","mtime":1520395331000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: \"GoogleMap\",\n  data: function data() {\n    return {\n      // default to Montreal to keep it simple\n      // change this to whatever makes sense\n      center: {\n        lat: 38.8938,\n        lng: 77.0310\n      },\n      markers: [],\n      places: [],\n      currentPlace: null\n    };\n  },\n  mounted: function mounted() {\n    this.geolocate();\n  },\n  methods: {\n    // receives a place object via the autocomplete component\n    setPlace: function setPlace(place) {\n      this.currentPlace = place;\n    },\n    addMarker: function addMarker() {\n      if (this.currentPlace) {\n        var marker = {\n          lat: this.currentPlace.geometry.location.lat(),\n          lng: this.currentPlace.geometry.location.lng()\n        };\n        this.markers.push({\n          position: marker\n        });\n        this.places.push(this.currentPlace);\n        this.center = marker;\n        this.currentPlace = null;\n      }\n    },\n    geolocate: function geolocate() {\n      var _this = this;\n\n      navigator.geolocation.getCurrentPosition(function (position) {\n        _this.center = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n      });\n    }\n  }\n};",{"version":3,"sources":["GoogleMap.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;QAEA;wBACA;;AAEA;AACA;;;aACA;;eACA;cACA;oBACA,AACA;AAPA;AASA;8BACA;SACA;AAEA;;AAEA;uCACA;0BACA;AACA;oCACA;6BACA;;mDAEA;mDACA,AACA;AAHA;;oBAIA;;8BACA;sBACA;4BACA;AACA;AACA;;AACA;;mEACA;;+BAEA;+BACA,AACA;AAHA;AAIA;AACA,AACA;AAzBA;AAjBA","file":"GoogleMap.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <div>\n      <h2>Search and add a pin</h2>\n      <label>\n        <gmap-autocomplete\n          @place_changed=\"setPlace\">\n        </gmap-autocomplete>\n        <button @click=\"addMarker\">Add</button>\n      </label>\n      <br/>\n\n    </div>\n    <br>\n    <gmap-map\n      :center=\"center\"\n      :zoom=\"15\"\n      style=\"width:100%;  height: 700px;\"\n      map-type-id=\"roadmap\"\n    >\n      <gmap-marker\n        :key=\"index\"\n        v-for=\"(m, index) in markers\"\n        :position=\"m.position\"\n        @click=\"center=m.position\"\n      ></gmap-marker>\n    </gmap-map>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"GoogleMap\",\n  data() {\n    return {\n      // default to Montreal to keep it simple\n      // change this to whatever makes sense\n      center: { lat: 38.8938, lng: 77.0310 },\n      markers: [],\n      places: [],\n      currentPlace: null\n    };\n  },\n\n  mounted() {\n    this.geolocate();\n  },\n\n  methods: {\n    // receives a place object via the autocomplete component\n    setPlace(place) {\n      this.currentPlace = place;\n    },\n    addMarker() {\n      if (this.currentPlace) {\n        const marker = {\n          lat: this.currentPlace.geometry.location.lat(),\n          lng: this.currentPlace.geometry.location.lng()\n        };\n        this.markers.push({ position: marker });\n        this.places.push(this.currentPlace);\n        this.center = marker;\n        this.currentPlace = null;\n      }\n    },\n    geolocate: function() {\n      navigator.geolocation.getCurrentPosition(position => {\n        this.center = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n      });\n    }\n  }\n};\n</script>\n\n<style scoped>\nh2{\n    margin: 0;\n}\n</style>"]}]}